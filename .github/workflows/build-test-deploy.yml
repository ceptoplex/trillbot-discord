on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

name: Build, Test and Deploy

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    env:
      IMAGE_NAME: trillbot-discord
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build and export Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          docker save -o /tmp/${{ env.IMAGE_NAME }}.${{ env.IMAGE_TAG }}.tar ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Upload Docker image to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.IMAGE_NAME }}.${{ env.IMAGE_TAG }}.tar
          path: /tmp/${{ env.IMAGE_NAME }}.${{ env.IMAGE_TAG }}.tar

  test:
    name: Test
    needs: build
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Docker image from artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.IMAGE_NAME }}.${{ env.IMAGE_TAG }}.tar
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/${{ env.IMAGE_NAME }}.${{ env.IMAGE_TAG }}.tar

      - name: Run pyflakes
        run: |
          docker run ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} pyflakes .

  deploy:
    name: Deploy
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    env:
      IMAGE_NAME: trillbot-discord
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download Docker image from artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.IMAGE_NAME }}.${{ env.IMAGE_TAG }}.tar
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/${{ env.IMAGE_NAME }}.${{ env.IMAGE_TAG }}.tar

      - name: Push Docker image
        id: push-image
        env:
          LOCAL_IMAGE: ${{ env.IAMGE_NAME }}:${{ env.IMAGE_TAG }}
          ECR_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.IAMGE_NAME }}:${{ env.IMAGE_TAG }}
        run: |
          docker tag ${{ env.LOCAL_IMAGE }} ${{ env.ECR_IMAGE }}
          docker push ${{ env.ECR_IMAGE }}
          echo "::set-output name=image::${{ env.ECR_IMAGE }}"

      - name: Create AWS ECS task definition
        id: aws-ecs-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: configs/task-definition.json
          container-name: ${{ env.IAMGE_NAME }}
          image: ${{ steps.push-image.outputs.image }}

      - name: Deploy AWS ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.aws-ecs-task-definition.outputs.task-definition }}
          service: trillbot-discord
          cluster: default
          wait-for-service-stability: true
